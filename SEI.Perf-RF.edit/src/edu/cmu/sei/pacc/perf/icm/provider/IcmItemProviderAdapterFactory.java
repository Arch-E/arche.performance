/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package edu.cmu.sei.pacc.perf.icm.provider;

import edu.cmu.sei.pacc.perf.icm.util.IcmAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class IcmItemProviderAdapterFactory extends IcmAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection supportedTypes = new ArrayList();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IcmItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.cmu.sei.pacc.perf.icm.AssemblyInstance} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssemblyInstanceItemProvider assemblyInstanceItemProvider;

  /**
   * This creates an adapter for a {@link edu.cmu.sei.pacc.perf.icm.AssemblyInstance}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createAssemblyInstanceAdapter()
  {
    if (assemblyInstanceItemProvider == null)
    {
      assemblyInstanceItemProvider = new AssemblyInstanceItemProvider(this);
    }

    return assemblyInstanceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.cmu.sei.pacc.perf.icm.IcmComponent} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IcmComponentItemProvider icmComponentItemProvider;

  /**
   * This creates an adapter for a {@link edu.cmu.sei.pacc.perf.icm.IcmComponent}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createIcmComponentAdapter()
  {
    if (icmComponentItemProvider == null)
    {
      icmComponentItemProvider = new IcmComponentItemProvider(this);
    }

    return icmComponentItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.cmu.sei.pacc.perf.icm.Constant} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConstantItemProvider constantItemProvider;

  /**
   * This creates an adapter for a {@link edu.cmu.sei.pacc.perf.icm.Constant}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createConstantAdapter()
  {
    if (constantItemProvider == null)
    {
      constantItemProvider = new ConstantItemProvider(this);
    }

    return constantItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.cmu.sei.pacc.perf.icm.Exponential} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExponentialItemProvider exponentialItemProvider;

  /**
   * This creates an adapter for a {@link edu.cmu.sei.pacc.perf.icm.Exponential}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createExponentialAdapter()
  {
    if (exponentialItemProvider == null)
    {
      exponentialItemProvider = new ExponentialItemProvider(this);
    }

    return exponentialItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.cmu.sei.pacc.perf.icm.Normal} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NormalItemProvider normalItemProvider;

  /**
   * This creates an adapter for a {@link edu.cmu.sei.pacc.perf.icm.Normal}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createNormalAdapter()
  {
    if (normalItemProvider == null)
    {
      normalItemProvider = new NormalItemProvider(this);
    }

    return normalItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.cmu.sei.pacc.perf.icm.SSComponent} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SSComponentItemProvider ssComponentItemProvider;

  /**
   * This creates an adapter for a {@link edu.cmu.sei.pacc.perf.icm.SSComponent}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createSSComponentAdapter()
  {
    if (ssComponentItemProvider == null)
    {
      ssComponentItemProvider = new SSComponentItemProvider(this);
    }

    return ssComponentItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.cmu.sei.pacc.perf.icm.IcmService} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IcmServiceItemProvider icmServiceItemProvider;

  /**
   * This creates an adapter for a {@link edu.cmu.sei.pacc.perf.icm.IcmService}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createIcmServiceAdapter()
  {
    if (icmServiceItemProvider == null)
    {
      icmServiceItemProvider = new IcmServiceItemProvider(this);
    }

    return icmServiceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.cmu.sei.pacc.perf.icm.ServiceSourcePinIcm} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ServiceSourcePinIcmItemProvider serviceSourcePinIcmItemProvider;

  /**
   * This creates an adapter for a {@link edu.cmu.sei.pacc.perf.icm.ServiceSourcePinIcm}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createServiceSourcePinIcmAdapter()
  {
    if (serviceSourcePinIcmItemProvider == null)
    {
      serviceSourcePinIcmItemProvider = new ServiceSourcePinIcmItemProvider(this);
    }

    return serviceSourcePinIcmItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.cmu.sei.pacc.perf.icm.SinkPinInstance} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SinkPinInstanceItemProvider sinkPinInstanceItemProvider;

  /**
   * This creates an adapter for a {@link edu.cmu.sei.pacc.perf.icm.SinkPinInstance}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createSinkPinInstanceAdapter()
  {
    if (sinkPinInstanceItemProvider == null)
    {
      sinkPinInstanceItemProvider = new SinkPinInstanceItemProvider(this);
    }

    return sinkPinInstanceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.cmu.sei.pacc.perf.icm.SourcePinInstance} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SourcePinInstanceItemProvider sourcePinInstanceItemProvider;

  /**
   * This creates an adapter for a {@link edu.cmu.sei.pacc.perf.icm.SourcePinInstance}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createSourcePinInstanceAdapter()
  {
    if (sourcePinInstanceItemProvider == null)
    {
      sourcePinInstanceItemProvider = new SourcePinInstanceItemProvider(this);
    }

    return sourcePinInstanceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.cmu.sei.pacc.perf.icm.Uniform} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UniformItemProvider uniformItemProvider;

  /**
   * This creates an adapter for a {@link edu.cmu.sei.pacc.perf.icm.Uniform}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createUniformAdapter()
  {
    if (uniformItemProvider == null)
    {
      uniformItemProvider = new UniformItemProvider(this);
    }

    return uniformItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.cmu.sei.pacc.perf.icm.Unknown} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UnknownItemProvider unknownItemProvider;

  /**
   * This creates an adapter for a {@link edu.cmu.sei.pacc.perf.icm.Unknown}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createUnknownAdapter()
  {
    if (unknownItemProvider == null)
    {
      unknownItemProvider = new UnknownItemProvider(this);
    }

    return unknownItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.cmu.sei.pacc.perf.icm.Scenario} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ScenarioItemProvider scenarioItemProvider;

  /**
   * This creates an adapter for a {@link edu.cmu.sei.pacc.perf.icm.Scenario}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createScenarioAdapter()
  {
    if (scenarioItemProvider == null)
    {
      scenarioItemProvider = new ScenarioItemProvider(this);
    }

    return scenarioItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link edu.cmu.sei.pacc.perf.icm.Mutex} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MutexItemProvider mutexItemProvider;

  /**
   * This creates an adapter for a {@link edu.cmu.sei.pacc.perf.icm.Mutex}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter createMutexAdapter()
  {
    if (mutexItemProvider == null)
    {
      mutexItemProvider = new MutexItemProvider(this);
    }

    return mutexItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class) || (((Class)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (assemblyInstanceItemProvider != null) assemblyInstanceItemProvider.dispose();
    if (icmComponentItemProvider != null) icmComponentItemProvider.dispose();
    if (constantItemProvider != null) constantItemProvider.dispose();
    if (exponentialItemProvider != null) exponentialItemProvider.dispose();
    if (normalItemProvider != null) normalItemProvider.dispose();
    if (ssComponentItemProvider != null) ssComponentItemProvider.dispose();
    if (icmServiceItemProvider != null) icmServiceItemProvider.dispose();
    if (serviceSourcePinIcmItemProvider != null) serviceSourcePinIcmItemProvider.dispose();
    if (sinkPinInstanceItemProvider != null) sinkPinInstanceItemProvider.dispose();
    if (sourcePinInstanceItemProvider != null) sourcePinInstanceItemProvider.dispose();
    if (uniformItemProvider != null) uniformItemProvider.dispose();
    if (unknownItemProvider != null) unknownItemProvider.dispose();
    if (scenarioItemProvider != null) scenarioItemProvider.dispose();
    if (mutexItemProvider != null) mutexItemProvider.dispose();
  }

}
